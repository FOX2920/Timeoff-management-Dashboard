import streamlit as st
import requests
import pandas as pd
from datetime import datetime, timedelta
import json
import numpy as np
from typing import Dict, List, Optional
import plotly.express as px
import plotly.graph_objects as go
from streamlit_calendar import calendar
import os

# C·∫•u h√¨nh page
st.set_page_config(
    page_title="Time Off Dashboard", 
    page_icon="üèñÔ∏è", 
    layout="wide",
    initial_sidebar_state="expanded"
)

class EmployeeManager:
    """Class ƒë·ªÉ qu·∫£n l√Ω th√¥ng tin nh√¢n vi√™n v√† mapping username -> name"""
    
    def __init__(self, account_token: str):
        self.account_token = account_token
        self.request_timeout = 30
        self.username_to_name_map = {}
        self._load_employee_mapping()
    
    def _make_request(self, url: str, data: Dict, description: str = "") -> requests.Response:
        """Th·ª±c hi·ªán HTTP request v·ªõi error handling"""
        try:
            response = requests.post(url, data=data, timeout=self.request_timeout)
            response.raise_for_status()
            return response
        except requests.exceptions.RequestException as e:
            st.error(f"Error {description}: {e}")
            raise
    
    def _load_employee_mapping(self):
        """T·∫£i mapping username -> name t·ª´ account API"""
        url = "https://account.base.vn/extapi/v1/group/get"
        data = {"access_token": self.account_token, "path": "aplus"}
        
        try:
            response = self._make_request(url, data, "fetching account members")
            response_data = response.json()
            
            members = response_data.get('group', {}).get('members', [])
            
            # T·∫°o mapping username -> name
            self.username_to_name_map = {
                m.get('username', ''): m.get('name', '') 
                for m in members 
                if m.get('username') and m.get('name')
            }
            
        except Exception as e:
            st.error(f"L·ªói khi l·∫•y danh s√°ch nh√¢n vi√™n: {e}")
            self.username_to_name_map = {}
    
    def get_name_by_username(self, username: str) -> str:
        """L·∫•y name t·ª´ username, fallback v·ªÅ username n·∫øu kh√¥ng t√¨m th·∫•y"""
        if not username:
            return ''
        return self.username_to_name_map.get(username, username)

class TimeoffProcessor:
    """Class ƒë·ªÉ x·ª≠ l√Ω d·ªØ li·ªáu timeoff v√† thay th·∫ø username b·∫±ng name"""
    
    def __init__(self, timeoff_token: str, account_token: str):
        self.timeoff_token = timeoff_token
        self.employee_manager = EmployeeManager(account_token)
        
    def get_base_timeoff_data(self):
        """L·∫•y d·ªØ li·ªáu t·ª´ Base Timeoff API"""
        url = "https://timeoff.base.vn/extapi/v1/timeoff/list"
        
        payload = f'access_token={self.timeoff_token}'
        headers = {'Content-Type': 'application/x-www-form-urlencoded'}
        
        response = requests.post(url, headers=headers, data=payload)
        return response.json()
    
    def extract_form_data(self, form_list):
        """Extract d·ªØ li·ªáu t·ª´ form fields"""
        form_data = {}
        for form_item in form_list:
            if form_item.get('name') and form_item.get('value'):
                form_data[form_item['name']] = form_item['value']
        return form_data
    
    def clean_vietnamese_text(self, text):
        """Clean Vietnamese text for column names"""
        import unicodedata
        text = unicodedata.normalize('NFD', text)
        text = ''.join(char for char in text if unicodedata.category(char) != 'Mn')
        text = text.replace(' ', '_').replace('/', '_').replace('(', '').replace(')', '').replace('-', '_').lower()
        return text
    
    def convert_timestamp_to_date(self, timestamp):
        """Chuy·ªÉn timestamp th√†nh datetime"""
        if timestamp and timestamp != '0':
            try:
                return datetime.fromtimestamp(int(timestamp))
            except:
                return None
        return None
    
    def convert_approvals_to_names(self, approvals: List[str]) -> str:
        """Chuy·ªÉn ƒë·ªïi danh s√°ch approval usernames th√†nh names"""
        if not approvals:
            return ''
        
        approval_names = []
        for username in approvals:
            name = self.employee_manager.get_name_by_username(username)
            approval_names.append(name)
        
        return ', '.join(approval_names)
    
    def create_ly_do_column_and_cleanup(self, df):
        """T·∫°o c·ªôt 'ly_do' t·ª´ c√°c c·ªôt c√≥ s·∫µn theo th·ª© t·ª± ∆∞u ti√™n"""
        if df.empty:
            return df
            
        df_copy = df.copy()
        df_copy['ly_do'] = ''
        
        priority_columns = ['ly_do_xin_nghi_phep', 'ly_do_xin_nghi_chinh', 'ly_do_xin_nghi']
        
        for col in priority_columns:
            if col in df_copy.columns:
                mask = (
                    (df_copy['ly_do'] == '') & 
                    (df_copy[col].notna()) & 
                    (df_copy[col].astype(str).str.strip() != '')
                )
                df_copy.loc[mask, 'ly_do'] = df_copy.loc[mask, col].astype(str).str.strip()
        
        columns_to_drop = [col for col in priority_columns if col in df_copy.columns]
        if columns_to_drop:
            df_copy = df_copy.drop(columns=columns_to_drop)
        
        return df_copy
    
    def extract_timeoff_to_dataframe(self, api_response):
        """Extract c√°c tr∆∞·ªùng quan tr·ªçng t·ª´ Base Timeoff API response th√†nh DataFrame v·ªõi name mapping"""
        timeoffs_data = []
        
        if 'timeoffs' in api_response:
            for timeoff in api_response['timeoffs']:
                form_data = self.extract_form_data(timeoff.get('form', []))
                
                approvals = timeoff.get('approvals', [])
                approval_names = self.convert_approvals_to_names(approvals)
                
                total_shifts = len(timeoff.get('shifts', []))
                
                total_leave_days = 0
                for shift_day in timeoff.get('shifts', []):
                    for shift in shift_day.get('shifts', []):
                        if 'num_leave' in shift:
                            total_leave_days += float(shift.get('num_leave', 0))
                
                final_approver_username = ''
                final_approver_name = ''
                if timeoff.get('data', {}).get('final_approved'):
                    final_approver_username = timeoff['data']['final_approved'].get('username', '')
                    final_approver_name = self.employee_manager.get_name_by_username(final_approver_username)
                
                username = timeoff.get('username', '')
                employee_name = self.employee_manager.get_name_by_username(username)
                
                timeoff_record = {
                    'id': timeoff.get('id'),
                    'employee_name': employee_name,
                    'username': username,
                    'state': timeoff.get('state'),
                    'metatype': timeoff.get('metatype'),
                    'paid_timeoff': timeoff.get('paid_timeoff'),
                    'start_date': self.convert_timestamp_to_date(timeoff.get('start_date')),
                    'end_date': self.convert_timestamp_to_date(timeoff.get('end_date')),
                    'total_leave_days': total_leave_days,
                    'total_shifts': total_shifts,
                    'approvals': approval_names,
                    'final_approver': final_approver_name,
                    'workflow': timeoff.get('workflow'),
                    'created_time': self.convert_timestamp_to_date(timeoff.get('since')),
                    'last_update': self.convert_timestamp_to_date(timeoff.get('last_update')),
                }
                
                # Add form data fields
                column_mapping = {
                    'L√Ω do xin ngh·ªâ ph√©p': 'ly_do_xin_nghi_phep',
                    'L√Ω do xin ngh·ªâ': 'ly_do_xin_nghi',  
                    'L√Ω do': 'ly_do_xin_nghi',
                    'Ghi ch√∫': 'ghi_chu',
                    'L√Ω do c√° nh√¢n': 'ly_do_ca_nhan',
                    'B·∫≠n vi·ªác c√° nh√¢n': 'ban_viec_ca_nhan',
                    'Vi·ªác ri√™ng': 'viec_rieng'
                }
                
                for key, value in form_data.items():
                    if key in column_mapping:
                        clean_key = column_mapping[key]
                    else:
                        clean_key = self.clean_vietnamese_text(key)
                    timeoff_record[clean_key] = value
                
                timeoff_record['ly_do_xin_nghi_chinh'] = (
                    form_data.get('L√Ω do xin ngh·ªâ ph√©p', '') or 
                    form_data.get('L√Ω do xin ngh·ªâ', '') or
                    form_data.get('L√Ω do', '') or
                    form_data.get('L√Ω do c√° nh√¢n', '') or
                    form_data.get('B·∫≠n vi·ªác c√° nh√¢n', '') or
                    form_data.get('Vi·ªác ri√™ng', '')
                )
                
                timeoffs_data.append(timeoff_record)
        
        df = pd.DataFrame(timeoffs_data)
        
        if not df.empty and 'created_time' in df.columns:
            df = df.sort_values('created_time', ascending=False)
        
        df = self.create_ly_do_column_and_cleanup(df)
        
        return df

# Cache d·ªØ li·ªáu ƒë·ªÉ tr√°nh g·ªçi API li√™n t·ª•c
@st.cache_data(ttl=300)  # Cache 5 ph√∫t
def load_timeoff_data():
    """Load d·ªØ li·ªáu timeoff v·ªõi caching"""
    # L·∫•y tokens t·ª´ environment variables
    timeoff_token = os.getenv('TIMEOFF_TOKEN')
    account_token = os.getenv('ACCOUNT_TOKEN')
    
    processor = TimeoffProcessor(timeoff_token, account_token)
    
    try:
        api_data = processor.get_base_timeoff_data()
        df = processor.extract_timeoff_to_dataframe(api_data)
        return df
    except Exception as e:
        st.error(f"L·ªói khi t·∫£i d·ªØ li·ªáu: {e}")
        return pd.DataFrame()

def get_state_info():
    """Tr·∫£ v·ªÅ th√¥ng tin v·ªÅ c√°c tr·∫°ng th√°i v√† m√†u s·∫Øc"""
    return {
        'approved': {'color': '#28a745', 'icon': '‚úÖ', 'label': 'ƒê√£ duy·ªát'},
        'pending': {'color': '#ffc107', 'icon': '‚è≥', 'label': 'Ch·ªù duy·ªát'},
        'rejected': {'color': '#dc3545', 'icon': '‚ùå', 'label': 'T·ª´ ch·ªëi'},
        'cancelled': {'color': '#6c757d', 'icon': '‚èπÔ∏è', 'label': 'ƒê√£ h·ªßy'},
        'draft': {'color': '#17a2b8', 'icon': 'üìù', 'label': 'Nh√°p'}
    }

def get_metatype_info():
    """Tr·∫£ v·ªÅ th√¥ng tin v·ªÅ c√°c lo·∫°i ngh·ªâ ph√©p v√† m√†u s·∫Øc"""
    return {
        'annual': {'color': '#28a745', 'icon': 'üèñÔ∏è', 'label': 'Ngh·ªâ ph√©p nƒÉm'},
        'sick': {'color': '#fd7e14', 'icon': 'ü§í', 'label': 'Ngh·ªâ ·ªëm'},
        'unpaid': {'color': '#dc3545', 'icon': 'üí∏', 'label': 'Ngh·ªâ kh√¥ng l∆∞∆°ng'},
        'personal': {'color': '#6f42c1', 'icon': 'üë§', 'label': 'Ngh·ªâ c√° nh√¢n'},
        'outside': {'color': '#20c997', 'icon': 'üè¢', 'label': 'C√¥ng t√°c ngo√†i'},
        'maternity': {'color': '#e83e8c', 'icon': 'üë∂', 'label': 'Ngh·ªâ thai s·∫£n'},
        'wedding': {'color': '#fd7e14', 'icon': 'üíí', 'label': 'Ngh·ªâ c∆∞·ªõi'},
        'funeral': {'color': '#6c757d', 'icon': 'üïäÔ∏è', 'label': 'Ngh·ªâ tang'}
    }

def convert_df_to_calendar_events(df):
    """Chuy·ªÉn DataFrame th√†nh format events cho calendar v·ªõi t·ªëi ∆∞u hi·ªÉn th·ªã text"""
    events = []
    
    if df.empty:
        return events
    
    state_info = get_state_info()
    metatype_info = get_metatype_info()
    
    for _, row in df.iterrows():
        if pd.notna(row['start_date']) and pd.notna(row['end_date']):
            # Determine color based on state and metatype
            if row['state'] == 'approved':
                color = metatype_info.get(row['metatype'], {}).get('color', '#28a745')
                icon = metatype_info.get(row['metatype'], {}).get('icon', 'üìÖ')
            else:
                color = state_info.get(row['state'], {}).get('color', '#007bff')
                icon = state_info.get(row['state'], {}).get('icon', 'üìÖ')
            
            # T·ªëi ∆∞u title ƒë·ªÉ tr√°nh b·ªã c·∫Øt
            # R√∫t ng·∫Øn t√™n nh√¢n vi√™n n·∫øu qu√° d√†i
            employee_name = row['employee_name']
            if len(employee_name) > 15:
                name_parts = employee_name.split()
                if len(name_parts) > 1:
                    # L·∫•y t√™n v√† ch·ªØ c√°i ƒë·∫ßu h·ªç
                    employee_name = f"{name_parts[-1]} {name_parts[0][0]}."
                else:
                    employee_name = employee_name[:12] + "..."
            
            # Format title v·ªõi xu·ªëng d√≤ng
            title = f"{icon} {employee_name}"
            
            # Th√™m th√¥ng tin l√Ω do ho·∫∑c lo·∫°i ngh·ªâ v·ªõi xu·ªëng d√≤ng
            if row['ly_do'] and row['ly_do'] != '':
                reason = row['ly_do']
                if len(reason) > 20:
                    reason = reason[:17] + "..."
                title += f"\n{reason}"
            else:
                metatype_label = metatype_info.get(row['metatype'], {}).get('label', row['metatype'].title())
                if len(metatype_label) > 20:
                    metatype_label = metatype_label[:17] + "..."
                title += f"\n{metatype_label}"
            
            # Th√™m s·ªë ng√†y v·ªõi xu·ªëng d√≤ng
            if row['total_leave_days'] > 0:
                title += f"\n({row['total_leave_days']} ng√†y)"
            
            # Create comprehensive event
            event = {
                "title": title,
                "start": row['start_date'].strftime('%Y-%m-%d'),
                "end": (row['end_date'] + timedelta(days=1)).strftime('%Y-%m-%d'),
                "color": color,
                "borderColor": color,
                "textColor": "#ffffff",
                "extendedProps": {
                    "id": row['id'],
                    "employee": row['employee_name'],
                    "state": row['state'],
                    "metatype": row['metatype'],
                    "days": row['total_leave_days'],
                    "reason": row['ly_do'],
                    "approver": row['final_approver'],
                    "created_time": row['created_time'].strftime('%Y-%m-%d %H:%M') if pd.notna(row['created_time']) else 'N/A',
                    "last_update": row['last_update'].strftime('%Y-%m-%d %H:%M') if pd.notna(row['last_update']) else 'N/A',
                    "paid": row['paid_timeoff'] if 'paid_timeoff' in row else False
                },
                "display": "block"
            }
            events.append(event)
    
    return events

def display_calendar_legend():
    """Hi·ªÉn th·ªã ch√∫ th√≠ch m√†u s·∫Øc cho calendar"""
    state_info = get_state_info()
    metatype_info = get_metatype_info()
    
    st.markdown("#### üìã Ch√∫ th√≠ch")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**Tr·∫°ng th√°i:**")
        for state, info in state_info.items():
            st.markdown(f"<div style='display: flex; align-items: center; margin: 5px 0;'>"
                       f"<div style='width: 20px; height: 20px; background-color: {info['color']}; "
                       f"border-radius: 3px; margin-right: 10px;'></div>"
                       f"<span>{info['icon']} {info['label']}</span></div>", 
                       unsafe_allow_html=True)
    
    with col2:
        st.markdown("**Lo·∫°i ngh·ªâ ph√©p:**")
        for metatype, info in metatype_info.items():
            st.markdown(f"<div style='display: flex; align-items: center; margin: 5px 0;'>"
                       f"<div style='width: 20px; height: 20px; background-color: {info['color']}; "
                       f"border-radius: 3px; margin-right: 10px;'></div>"
                       f"<span>{info['icon']} {info['label']}</span></div>", 
                       unsafe_allow_html=True)

def display_event_details(event_data):
    """Hi·ªÉn th·ªã chi ti·∫øt event khi click"""
    if not event_data:
        return
    
    props = event_data.get('extendedProps', {})
    state_info = get_state_info()
    metatype_info = get_metatype_info()
    
    # Get state and metatype info
    state = props.get('state', '')
    metatype = props.get('metatype', '')
    state_display = state_info.get(state, {})
    metatype_display = metatype_info.get(metatype, {})
    
    st.markdown("### üìã Chi ti·∫øt y√™u c·∫ßu ngh·ªâ ph√©p")
    
    # Create a nice card layout
    st.markdown(f"""
    <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                padding: 20px; border-radius: 10px; color: white; margin: 10px 0;">
        <h4 style="margin: 0; color: white;">üë§ {props.get('employee', 'N/A')}</h4>
    </div>
    """, unsafe_allow_html=True)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**üìÖ Th√¥ng tin th·ªùi gian:**")
        st.info(f"**T·ª´ ng√†y:** {event_data.get('start', 'N/A')}\n"
                f"**ƒê·∫øn ng√†y:** {event_data.get('end', 'N/A')}\n"
                f"**S·ªë ng√†y:** {props.get('days', 0)} ng√†y")
        
        st.markdown("**üìä Tr·∫°ng th√°i & Lo·∫°i:**")
        status_color = state_display.get('color', '#007bff')
        metatype_color = metatype_display.get('color', '#007bff')
        
        st.markdown(f"""
        <div style="margin: 10px 0;">
            <span style="background-color: {status_color}; color: white; padding: 5px 10px; 
                         border-radius: 15px; font-size: 14px;">
                {state_display.get('icon', '')} {state_display.get('label', state)}
            </span>
        </div>
        <div style="margin: 10px 0;">
            <span style="background-color: {metatype_color}; color: white; padding: 5px 10px; 
                         border-radius: 15px; font-size: 14px;">
                {metatype_display.get('icon', '')} {metatype_display.get('label', metatype)}
            </span>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("**üìù Th√¥ng tin chi ti·∫øt:**")
        reason = props.get('reason', 'Kh√¥ng c√≥ th√¥ng tin')
        if reason and reason.strip():
            st.success(f"**L√Ω do:** {reason}")
        else:
            st.info("**L√Ω do:** Kh√¥ng c√≥ th√¥ng tin")
        
        approver = props.get('approver', 'N/A')
        if approver and approver.strip():
            st.success(f"**Ng∆∞·ªùi duy·ªát:** {approver}")
        
        # Additional info
        paid_status = "C√≥ l∆∞∆°ng" if props.get('paid', False) else "Kh√¥ng l∆∞∆°ng"
        st.info(f"**Lo·∫°i:** {paid_status}")
    
    # Timeline info
    st.markdown("**‚è∞ Th·ªùi gian x·ª≠ l√Ω:**")
    col3, col4 = st.columns(2)
    with col3:
        st.text(f"T·∫°o: {props.get('created_time', 'N/A')}")
    with col4:
        st.text(f"C·∫≠p nh·∫≠t: {props.get('last_update', 'N/A')}")

def main():
    """Main dashboard"""
    
    # Custom CSS cho calendar v√† hi·ªÉn th·ªã text t·ªët h∆°n
    st.markdown("""
    <style>
    .main-header {
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        padding: 2rem;
        border-radius: 10px;
        color: white;
        text-align: center;
        margin-bottom: 2rem;
    }
    
    .metric-card {
        background: white;
        padding: 1rem;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        border-left: 4px solid #667eea;
    }
    
    .calendar-container {
        background: white;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    
    .legend-item {
        display: flex;
        align-items: center;
        margin: 5px 0;
        padding: 5px;
        background: #f8f9fa;
        border-radius: 5px;
    }
    
    /* T·ªëi ∆∞u CSS cho calendar events */
    .fc-event {
        font-size: 11px !important;
        border-radius: 6px !important;
        border: none !important;
        padding: 2px 4px !important;
        font-weight: 500 !important;
        box-shadow: 0 1px 3px rgba(0,0,0,0.2) !important;
        transition: all 0.2s ease !important;
        white-space: pre-line !important;
        line-height: 1.2 !important;
        overflow: hidden !important;
        text-overflow: ellipsis !important;
        min-height: 20px !important;
    }
    
    .fc-event:hover {
        transform: translateY(-1px) !important;
        box-shadow: 0 2px 8px rgba(0,0,0,0.3) !important;
        z-index: 1000 !important;
    }
    
    .fc-event-title {
        font-weight: 600 !important;
        white-space: pre-line !important;
        overflow: hidden !important;
        text-overflow: ellipsis !important;
        line-height: 1.1 !important;
    }
    
    .fc-daygrid-event {
        margin: 1px 2px !important;
        min-height: 22px !important;
    }
    
    .fc-daygrid-event-harness {
        margin-bottom: 2px !important;
    }
    
    /* TƒÉng chi·ªÅu cao c·ªßa calendar cells */
    .fc-daygrid-day {
        min-height: 80px !important;
    }
    
    .fc-daygrid-day-frame {
        min-height: 80px !important;
    }
    
    .fc-daygrid-day-events {
        margin-bottom: 2px !important;
    }
    
    .fc-button-primary {
        background-color: #667eea !important;
        border-color: #667eea !important;
    }
    
    .fc-button-primary:hover {
        background-color: #764ba2 !important;
        border-color: #764ba2 !important;
    }
    
    .fc-today-button {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
    }
    
    .fc-header-toolbar {
        margin-bottom: 1em !important;
        padding: 10px !important;
        background: #f8f9fa !important;
        border-radius: 8px !important;
    }
    
    .fc-col-header-cell {
        background: #f8f9fa !important;
        font-weight: 600 !important;
    }
    
    .fc-day-today {
        background-color: rgba(102, 126, 234, 0.1) !important;
    }
    
    /* Responsive font size */
    @media (max-width: 768px) {
        .fc-event {
            font-size: 10px !important;
        }
    }
    </style>
    """, unsafe_allow_html=True)
    
    # Header with gradient
    st.markdown("""
    <div class="main-header">
        <h1>üèñÔ∏è Time Off Management Dashboard</h1>
        <p>Qu·∫£n l√Ω v√† theo d√µi y√™u c·∫ßu ngh·ªâ ph√©p m·ªôt c√°ch hi·ªáu qu·∫£</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Load data
    with st.spinner("üîÑ ƒêang t·∫£i d·ªØ li·ªáu..."):
        df = load_timeoff_data()
    
    if df.empty:
        st.error("‚ùå Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu timeoff")
        return
    
    # Sidebar filters with better styling
    st.sidebar.markdown("## üîç B·ªô l·ªçc d·ªØ li·ªáu")
    
    # Date range filter
    if not df.empty and 'start_date' in df.columns:
        min_date = df['start_date'].min().date() if pd.notna(df['start_date'].min()) else datetime.now().date()
        max_date = df['start_date'].max().date() if pd.notna(df['start_date'].max()) else datetime.now().date()
        
        date_range = st.sidebar.date_input(
            "üìÖ Kho·∫£ng th·ªùi gian",
            value=(min_date, max_date),
            min_value=min_date,
            max_value=max_date
        )
    
    # Employee filter
    employees = ['T·∫•t c·∫£'] + sorted(df['employee_name'].unique().tolist())
    selected_employees = st.sidebar.multiselect(
        "üë• Nh√¢n vi√™n", 
        employees, 
        default=['T·∫•t c·∫£']
    )
    
    # State filter with icons
    state_info = get_state_info()
    state_options = ['T·∫•t c·∫£'] + [f"{info['icon']} {info['label']}" for state, info in state_info.items()]
    selected_states_display = st.sidebar.multiselect(
        "üìä Tr·∫°ng th√°i",
        state_options,
        default=['T·∫•t c·∫£']
    )
    
    # Convert back to original state values
    selected_states = []
    if 'T·∫•t c·∫£' not in selected_states_display:
        for display in selected_states_display:
            for state, info in state_info.items():
                if f"{info['icon']} {info['label']}" == display:
                    selected_states.append(state)
    else:
        selected_states = ['T·∫•t c·∫£']
    
    # Metatype filter with icons
    metatype_info = get_metatype_info()
    metatype_options = ['T·∫•t c·∫£'] + [f"{info['icon']} {info['label']}" for meta, info in metatype_info.items()]
    selected_metatypes_display = st.sidebar.multiselect(
        "üìã Lo·∫°i ngh·ªâ ph√©p",
        metatype_options,
        default=['T·∫•t c·∫£']
    )
    
    # Convert back to original metatype values
    selected_metatypes = []
    if 'T·∫•t c·∫£' not in selected_metatypes_display:
        for display in selected_metatypes_display:
            for metatype, info in metatype_info.items():
                if f"{info['icon']} {info['label']}" == display:
                    selected_metatypes.append(metatype)
    else:
        selected_metatypes = ['T·∫•t c·∫£']
    
    # Apply filters
    filtered_df = df.copy()
    
    # Date filter
    if len(date_range) == 2:
        filtered_df = filtered_df[
            (filtered_df['start_date'].dt.date >= date_range[0]) & 
            (filtered_df['start_date'].dt.date <= date_range[1])
        ]
    
    # Employee filter
    if 'T·∫•t c·∫£' not in selected_employees:
        filtered_df = filtered_df[filtered_df['employee_name'].isin(selected_employees)]
    
    # State filter
    if 'T·∫•t c·∫£' not in selected_states:
        filtered_df = filtered_df[filtered_df['state'].isin(selected_states)]
    
    # Metatype filter
    if 'T·∫•t c·∫£' not in selected_metatypes:
        filtered_df = filtered_df[filtered_df['metatype'].isin(selected_metatypes)]
    
    # Summary metrics with better styling
    st.markdown("### üìä T·ªïng quan")
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            label="üìã T·ªïng s·ªë y√™u c·∫ßu", 
            value=len(filtered_df),
            delta=f"{len(filtered_df)} requests"
        )
    
    with col2:
        approved_count = len(filtered_df[filtered_df['state'] == 'approved'])
        approval_rate = (approved_count / len(filtered_df) * 100) if len(filtered_df) > 0 else 0
        st.metric(
            label="‚úÖ ƒê√£ duy·ªát", 
            value=approved_count,
            delta=f"{approval_rate:.1f}% t·ª∑ l·ªá duy·ªát"
        )
    
    with col3:
        pending_count = len(filtered_df[filtered_df['state'] == 'pending'])
        st.metric(
            label="‚è≥ Ch·ªù duy·ªát", 
            value=pending_count,
            delta=f"{pending_count} pending"
        )
    
    with col4:
        total_days = filtered_df['total_leave_days'].sum()
        avg_days = total_days / len(filtered_df) if len(filtered_df) > 0 else 0
        st.metric(
            label="üìÖ T·ªïng s·ªë ng√†y ngh·ªâ", 
            value=f"{total_days:.1f}",
            delta=f"{avg_days:.1f} ng√†y/y√™u c·∫ßu"
        )
    
    # Tabs with improved styling
    tab1, tab2, tab3, tab4 = st.tabs([
        "üìÖ Calendar View", 
        "üìä Analytics", 
        "üìã Data Table", 
        "‚öôÔ∏è Settings"
    ])
    
    with tab1:
        st.markdown("### üìÖ L·ªãch Time Off")
        
        # Calendar controls
        col1, col2 = st.columns([3, 1])
        
        with col1:
            # Calendar mode selection with better options
            mode_options = {
                "dayGridMonth": "üìÖ Th√°ng",
                "dayGridWeek": "üìÖ Tu·∫ßn", 
                "timeGridWeek": "‚è∞ Tu·∫ßn (gi·ªù)",
                "listMonth": "üìã Danh s√°ch th√°ng"
            }
            
            selected_mode_display = st.selectbox(
                "Ch·∫ø ƒë·ªô xem:",
                list(mode_options.values()),
                index=0
            )
            
            # Get actual mode value
            mode = [k for k, v in mode_options.items() if v == selected_mode_display][0]
        
        with col2:
            st.markdown("**üé® T√πy ch·ªçn hi·ªÉn th·ªã**")
            show_legend = st.checkbox("Hi·ªÉn th·ªã ch√∫ th√≠ch", value=True)
            show_weekend = st.checkbox("Hi·ªÉn th·ªã cu·ªëi tu·∫ßn", value=True)
        
        # Convert data to events
        events = convert_df_to_calendar_events(filtered_df)
        
        # Enhanced calendar options v·ªõi t·ªëi ∆∞u hi·ªÉn th·ªã
        calendar_options = {
            "editable": False,
            "navLinks": True,
            "selectable": False,
            "dayMaxEvents": 5,  # TƒÉng s·ªë events t·ªëi ƒëa
            "moreLinkClick": "popover",
            "eventDisplay": "block",
            "displayEventTime": False,
            "weekends": show_weekend,
            "headerToolbar": {
                "left": "today prev,next",
                "center": "title", 
                "right": "dayGridMonth,dayGridWeek,timeGridWeek,listMonth"
            },
            "footerToolbar": {
                "left": "",
                "center": "",
                "right": ""
            },
            "initialView": mode,
            "height": 750,  # TƒÉng chi·ªÅu cao
            "eventMouseEnter": True,
            "eventMouseLeave": True,
            "locale": "vi",
            "buttonText": {
                "today": "H√¥m nay",
                "month": "Th√°ng",
                "week": "Tu·∫ßn", 
                "day": "Ng√†y",
                "list": "Danh s√°ch"
            },
            "dayMaxEventRows": 4,  # Gi·ªõi h·∫°n s·ªë d√≤ng events
            "moreLinkText": "th√™m",  # Text cho link "more"
            "eventMinHeight": 20,  # Chi·ªÅu cao t·ªëi thi·ªÉu c·ªßa event
        }
        
        # Display calendar
        if events:
            st.markdown('<div class="calendar-container">', unsafe_allow_html=True)
            
            calendar_state = calendar(
                events=events,
                options=calendar_options,
                key="timeoff_calendar"
            )
            
            st.markdown('</div>', unsafe_allow_html=True)
            
            # Show selected event details in a nice format
            if calendar_state.get("eventClick"):
                event_data = calendar_state["eventClick"]["event"]
                display_event_details(event_data)
                
        else:
            st.info("üìÖ Kh√¥ng c√≥ d·ªØ li·ªáu time off trong kho·∫£ng th·ªùi gian ƒë∆∞·ª£c ch·ªçn")
            st.markdown("**G·ª£i √Ω:** Th·ª≠ ƒëi·ªÅu ch·ªânh b·ªô l·ªçc ƒë·ªÉ xem th√™m d·ªØ li·ªáu")
        
        # Hi·ªÉn th·ªã ch√∫ th√≠ch n·∫øu ƒë∆∞·ª£c ch·ªçn
        if show_legend:
            display_calendar_legend()
    
    with tab2:
        st.subheader("üìä Ph√¢n t√≠ch d·ªØ li·ªáu")
        
        if not filtered_df.empty:
            col1, col2 = st.columns(2)
            
            with col1:
                # Chart by state v·ªõi m√†u s·∫Øc t√πy ch·ªânh
                state_counts = filtered_df['state'].value_counts()
                colors = [get_state_info().get(state, {}).get('color', '#007bff') for state in state_counts.index]
                
                fig1 = px.pie(
                    values=state_counts.values, 
                    names=[get_state_info().get(state, {}).get('label', state) for state in state_counts.index],
                    title="üéØ Ph√¢n b·ªë theo tr·∫°ng th√°i",
                    color_discrete_sequence=colors
                )
                fig1.update_traces(textposition='inside', textinfo='percent+label')
                fig1.update_layout(showlegend=True, height=400)
                st.plotly_chart(fig1, use_container_width=True)
                
                # Top employees
                top_employees = filtered_df['employee_name'].value_counts().head(10)
                fig3 = px.bar(
                    x=top_employees.values,
                    y=top_employees.index,
                    orientation='h',
                    title="üë• Top 10 nh√¢n vi√™n c√≥ nhi·ªÅu y√™u c·∫ßu nh·∫•t",
                    labels={'x': 'S·ªë y√™u c·∫ßu', 'y': 'Nh√¢n vi√™n'},
                    color=top_employees.values,
                    color_continuous_scale="viridis"
                )
                fig3.update_layout(height=400, showlegend=False)
                st.plotly_chart(fig3, use_container_width=True)
            
            with col2:
                # Chart by metatype v·ªõi m√†u s·∫Øc t√πy ch·ªânh
                metatype_counts = filtered_df['metatype'].value_counts()
                colors = [get_metatype_info().get(meta, {}).get('color', '#007bff') for meta in metatype_counts.index]
                
                fig2 = px.bar(
                    x=[get_metatype_info().get(meta, {}).get('label', meta) for meta in metatype_counts.index],
                    y=metatype_counts.values,
                    title="üìã Ph√¢n b·ªë theo lo·∫°i ngh·ªâ ph√©p",
                    labels={'x': 'Lo·∫°i', 'y': 'S·ªë l∆∞·ª£ng'},
                    color=metatype_counts.values,
                    color_discrete_sequence=colors
                )
                fig2.update_layout(height=400, showlegend=False)
                st.plotly_chart(fig2, use_container_width=True)
                
                # Timeline
                if 'start_date' in filtered_df.columns:
                    monthly_data = filtered_df.groupby(
                        filtered_df['start_date'].dt.to_period('M')
                    ).size().reset_index()
                    monthly_data.columns = ['Th√°ng', 'S·ªë y√™u c·∫ßu']
                    monthly_data['Th√°ng'] = monthly_data['Th√°ng'].astype(str)
                    
                    fig4 = px.line(
                        monthly_data, 
                        x='Th√°ng', 
                        y='S·ªë y√™u c·∫ßu',
                        title="üìà Xu h∆∞·ªõng theo th·ªùi gian",
                        markers=True
                    )
                    fig4.update_traces(line=dict(width=3), marker=dict(size=8))
                    fig4.update_layout(height=400)
                    st.plotly_chart(fig4, use_container_width=True)
    
    with tab3:
        st.subheader("üìã B·∫£ng d·ªØ li·ªáu")
        
        # Display options
        col1, col2, col3 = st.columns([2, 1, 1])
        with col2:
            show_all_columns = st.checkbox("Hi·ªÉn th·ªã t·∫•t c·∫£ c·ªôt", False)
        with col3:
            items_per_page = st.selectbox("S·ªë d√≤ng/trang", [10, 25, 50, 100], index=1)
        
        if not filtered_df.empty:
            if show_all_columns:
                display_df = filtered_df
            else:
                # Select important columns
                important_cols = [
                    'employee_name', 'state', 'metatype', 'start_date', 'end_date', 
                    'total_leave_days', 'ly_do', 'final_approver'
                ]
                available_cols = [col for col in important_cols if col in filtered_df.columns]
                display_df = filtered_df[available_cols]
            
            # Format dates
            if 'start_date' in display_df.columns:
                display_df['start_date'] = pd.to_datetime(display_df['start_date']).dt.strftime('%Y-%m-%d')
            if 'end_date' in display_df.columns:
                display_df['end_date'] = pd.to_datetime(display_df['end_date']).dt.strftime('%Y-%m-%d')
            
            # Pagination
            total_rows = len(display_df)
            total_pages = (total_rows + items_per_page - 1) // items_per_page
            
            if total_pages > 1:
                page = st.selectbox(f"Trang (1-{total_pages})", range(1, total_pages + 1))
                start_idx = (page - 1) * items_per_page
                end_idx = start_idx + items_per_page
                display_df_page = display_df.iloc[start_idx:end_idx]
            else:
                display_df_page = display_df
            
            st.dataframe(
                display_df_page,
                use_container_width=True,
                hide_index=True
            )
            
            # Download section
            st.markdown("### üì• T·∫£i xu·ªëng d·ªØ li·ªáu")
            col1, col2 = st.columns(2)
            
            with col1:
                csv = filtered_df.to_csv(index=False, encoding='utf-8-sig')
                st.download_button(
                    label="üì• T·∫£i xu·ªëng d·ªØ li·ªáu ƒë√£ l·ªçc (CSV)",
                    data=csv,
                    file_name=f"filtered_timeoff_data_{datetime.now().strftime('%Y%m%d')}.csv",
                    mime="text/csv",
                    type="primary"
                )
            
            with col2:
                # JSON download
                json_data = filtered_df.to_json(orient='records', date_format='iso', force_ascii=False)
                st.download_button(
                    label="üì• T·∫£i xu·ªëng d·ªØ li·ªáu ƒë√£ l·ªçc (JSON)",
                    data=json_data,
                    file_name=f"filtered_timeoff_data_{datetime.now().strftime('%Y%m%d')}.json",
                    mime="application/json"
                )
        else:
            st.info("üì≠ Kh√¥ng c√≥ d·ªØ li·ªáu ph√π h·ª£p v·ªõi b·ªô l·ªçc")
    
    with tab4:
        st.subheader("‚öôÔ∏è C√†i ƒë·∫∑t h·ªá th·ªëng")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("#### üìà Th√¥ng tin h·ªá th·ªëng")
            info_data = {
                "T·ªïng s·ªë records": len(df),
                "S·ªë nh√¢n vi√™n": df['employee_name'].nunique(),
                "Records sau l·ªçc": len(filtered_df),
                "Kho·∫£ng th·ªùi gian": f"{df['start_date'].min().strftime('%Y-%m-%d') if pd.notna(df['start_date'].min()) else 'N/A'} ‚Üí {df['start_date'].max().strftime('%Y-%m-%d') if pd.notna(df['start_date'].max()) else 'N/A'}"
            }
            
            for label, value in info_data.items():
                st.metric(label, value)
        
        with col2:
            st.markdown("#### üîß C√¥ng c·ª• qu·∫£n l√Ω")
            
            # Refresh button
            if st.button("üîÑ L√†m m·ªõi d·ªØ li·ªáu", type="primary", use_container_width=True):
                st.cache_data.clear()
                st.rerun()
            
            st.markdown("---")
            
            # Export full data
            st.markdown("**üì§ Xu·∫•t to√†n b·ªô d·ªØ li·ªáu:**")
            full_csv = df.to_csv(index=False, encoding='utf-8-sig')
            st.download_button(
                label="üì• T·∫£i xu·ªëng to√†n b·ªô d·ªØ li·ªáu (CSV)",
                data=full_csv,
                file_name=f"full_timeoff_data_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                mime="text/csv",
                use_container_width=True
            )
            
            # System stats
            st.markdown("---")
            st.markdown("**‚ö° Tr·∫°ng th√°i h·ªá th·ªëng:**")
            st.success("‚úÖ API Connection: Active")
            st.success("‚úÖ Data Cache: Active")
            st.success("‚úÖ Environment Variables: Loaded")
            st.info(f"üïí Last Update: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

if __name__ == "__main__":
    main()
